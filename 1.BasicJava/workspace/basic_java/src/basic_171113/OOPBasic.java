package basic_171113;

public class OOPBasic {
/*
 	Object Oriented Programming(객체지향 프로그래밍)
 
 	1. 객체지향 언어
 		-기존의 프로그래밍 언어에 몇 가지 새로운 규칙을 추가한 보다 발전된 형태이다.
 		-규칙들을 이용해서 코드간에 서로 관계를 맺어줌으로써 보다 유기적으로 프로그램을 구성한다.
 		-객체지향 언어의 특징
 			:코드의 재사용성이 높다.
 				-새로운 코드를 작성 할 때 기존의 코드를 이용하여 쉽게 작성 할 수 있다.
 			:코드의 관리가 용이하다
 				-코드간의 관계를 이용해서 적은 노력으로 쉽게 코드를 변경 할 수 있다.
			:신뢰성이 높은 프로그래밍을 가능하게 한다.
				-제어자와 메서드를 이용하여 데이터를 보호하고 올바른 값을 유지하도록 하며 코드의 
				 중복을 제거하여 코드의 불일치로 인한 오작동을 방지 할수 있다.
 
 	2. 클래스와 객체
 		-클래스란?
 			:객체를 정의해 놓은 것이다.
 			:객체의 설계도 또는 틀이다.
 			:Tv 설계도의 예
 				-     클래스     |   객체
 				  ========================
 			     	제품 설계도  |   제품
 					 TV 설계도   |    TV
 					붕어빵 기계  |  붕어빵
 
 
	 		-클래스의 선언
	 			[접근제어자] [지정예약어] class 클래스명 [extends 클래스] [implements 인터페이스]
	 			  public        abstract  class  Child    extends Parent   implements Serializable{}
	  
	  -객체란?
 		: 실제로 존재하는 것, 사물 또는 개념
 		: 객체의 구성요소
 			-속성(멤버변수, 특성, 필드 , 상태)
 				:크기, 길이, 너비, 높이, 색상, 볼륨...
 			-기능(메서드, 행위, 함수)
 				: 켜기, 끄기...
 	
	  -인스턴스란?
	  	: 클래스로부터 객체를 만드는 과정을 클래스의 인스턴스화라고 한다
	  	: 인스턴스 생성방법
	  		-클래스 명 변수명 ; //클래스의 객체를 참조하기 위한 참조변수를 선언한다
	  		 변수명 = new 클래스명(); // 클래스의 객체를 생성 후, 객체의 주소를 참조변수에 저장한다.
	  		 
	  	: 인스턴스는 참조변수를 통해서만 다룰 수 있으며 참조변수의 타입은 인스턴스의 타입과 일치해야한다.
	  	: 선언위치에 따른 변수의 종류
	  		-Global variable(class variable, instance variable), local variable
	  		
	  			:instance variable
	  				- 클래스의 영역에 선언되며, 클래스의 인스턴스를 생성 할 때 만들어진다.
	  				- 인스턴스변수의 값을 읽어오거나 저장하기 위해서는 먼저 인스턴스를 생성해야한다.
	  				- 인스턴스는 독립적인 저장공간을 가지므로 서로 다른 값을 가질 수 있다.
	  				  그러므로, 인스턴스마다 고유한 상태를 유지해야하는 속성의 경우 인스턴스변수로 선언한다.
	  				  
			    :class variable
			    	- 모든 인스턴스가 공통된 저장공간을 (변수) 공유하게 된다.
			    	- 한 클래스의 모든 인스턴스들이 공통적으로 값을 유지해야 하는 속성의 경우 클래스변수로 선언한다.
			    	- 인스턴스 변수 앞에 static을 붙이기만 하면 된다.
			    	
		    	:local variable
 					- 메서드 내에 선언되며 메서드 내에서만 사용 가능하다
 					- 메서드 종료시 소멸되게 된다.
 					- for문이나 while문의 블럭내에 선언된 지역변수
 					  지역변수가 선언된 블럭{}내에서만 사용 가능하다.
 					  
	  3. Method
	  	: 어떠한 작업을 수행하기 위한 명령문의 집합
	  	: 주로 어떤 값을 입력받아서 처리하고 그 결과를 돌려준다.
	  	: 입력받은 값이 없을수도, 결과를 반환하지 않을수도 있다.
	  	: 반복적으로 사용되는 코드를 줄이기 위해 사용한다.
	  		-코드 양이 줄고 유지보수가 편리하다.
  		: 작성방법
  			-리턴타입 메서드명(변수타입 변수명, 변수타입 변수명,...){
  				//수행될 코드
  				 return 반환값;
  			}
		  -return문
		  	:메서드가 정상적으로 종료되는 경우
		  		-메서드의 블럭{}내의 마지막 문장까지 수행하였을떄
		  		-메서드의 블럭{}내에 있는 문장을 수행 중 return문을 만났을 때
	 		:반환값
	 			-없는 경우에는 return;
	 			-있는 경우에는 return 반환값; 지정해주면 된다
	 			-리턴타입과 반환값의 타입은 일치해야한다.
		  -매개변수
		  	:메서드를 호출 할 때 매개변수로 지정 한 값ㅇ르 메서드의 매개변수에 복사해서 넘겨준다.
		  	:기본형 매개변수
		  		-단순히 저장된 값만 복사한다.
		  		-변수의 값만 읽을 수 있다.
	  		:참조형 매개변수
	  			-인스턴스의 주소가 복사된다.
	  			-변수의 값을 읽고 수정 할 수 있다.
	  			
	  4. 재귀호출 (recursive call)
	  	: 메서드 내부에서 메서드 자기자신을 다시 호출하는 것
	  	
	  5. 메서드의 종류
		:클래스 메서드 (static 메서드)
			-객체생성 없이 ClassName.MethodName()로 호출
			-인스턴스 멤버들과 관련 없는 작업을 한다.
			-클래스 메서드 내에서는 인스턴스 멤버들을 호출 할 수 없다.
			-클래스 메서드 내에서 인스턴스 멤버를 사용 하기 위해서는 인스턴스 메서드로 바꿔줘야한다
		:인스턴스 메서트
			-인스턴스를 생성 후 RefferenceVariable.MethodName()로 호출
			-인스턴스 멤버와 관련된 작업을 한다.
			-인스턴스 메서드 내에서는 인스턴스 멤버를 사용 할수 있다.
			
	  6.클래스 멤버와 인스턴스 멤버간의 호출
		:같은 클래스 멤버간에는 객체생성 없이 참조 할 수 있다.
		:클래스 멤버들은 인스턴스 멤버를 참조 할 수 없다.
			(인스턴스 멤버가 존재하는 시점은 클래스 멤버가 항상 존재한다.
			클래스 멤버가 존재하는 시점에는 인스턴스 멤버가 존재하지 않는다.)
	
	  7.메서드 오버로딩
	  	:한 클래스 내에 동일한 이름의 메서드를 여러개 정의하는 것을 메서드 오버로딩이라고 한다.
	  	:println()
	  		-조건
	  			:메서드명이 동일해야한다.
	  			:매개변수의 개수가 다르거나 타입이 달라야한다.
	  			:매개변수가 같다. 리턴타입이 다른 경우는 오버로딩이 성립하지 않는다.
  			-오버로딩이 없을 때 생길 수 잇는 일
  				:메서드의 이름으로만 구별된다면, 한 클래스 내의 모든 메서드의 이름이 달라야한다.
  				:근본적으로 같은 기능을 하는 것인데 다른 이름으로 표현되어 기억하기 어려움
 				:메서드의 이름을 짓는데 고민을 덜 수 있다.
 	  8.생성자
 	  	:인스턴스가 생성될 때 호출되는 인스턴스 초기화 메서드이다.
 	  		(인스턴스 변수의 초기화 작업에 주로 사용된다.)
 	  	:특징
 	  		-메서드처럼 클래스 내에 선언된다.
 	  		-리턴값이 없다.
 	  			(생성자도 메서드이기때문에 리턴이 없는void를 적어야 하지만 모든 생성자가 리턴값이 없으므로 생략)
  			-정의방법
  				:기본 생성자
  					클래스명(){}
				:매개변수가 있는 생성자
					클래스명(변수타입 변수명, 변수타입 변수명,...){}
 	  	:생성자에서 다른 생성자 호출하기
 	  		-같은 클래스의 멤버들간에 서로 호출 할 수 있는 것 처럼 생성자 간에도 서로 호출이 가능하다.
 	  		-조건 
 	  			생성자의 이름은 클래스명과 동일해야한다.
 	  			클래스명 대신 this를 사용한다.
 	  			한 생성자에서 다른 생성자를 호출 할 때는 반드시 첫 줄에서만 호출해야한다.
 	  			
 	  9.변수의 초기화
  			-변수를 선언하고 처음으로 값을 저장하는 것을 '변수의 초기화'라 한다.
  			-초기화 방법
  				:명시적 초기화
  					변수의 선언과 동시에 초기화 하는 것
  					int a = 5;
				:생성자를 이용한 초기화
				:초기화 블럭(변수의 복잡한 초기화의 경우 사용한다.)
					클래스 초기화 블럭(클래스 변수의 초기화 목적으로 사용한다)
					인스턴스 초기화 블럭(인스턴스 변수의 초기화 목적으로 사용)
					
			-초기화 순서
				:클래스변수
					명시적 초기화 (기본값으로 초기화) => 클래스 초기화 블럭
				:인스턴스 변수
					명시적 초기화(기본값으로 초기화) =>초기화 블럭 =>생성자
 	  			
 	  			
 	  			
 	JVM (Java Virtual Machine)
 	
 	1.Method Area
 		-class variable
 		-class method
 		
	2.Call Stack
		-Call Method
		-Stack structure
		
	3.Heap
		-instance
 
 	
 */
}


































